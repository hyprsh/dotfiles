{"id":"9266483a-6b36-44e3-a58b-1abb949e96ee","zed":"context","version":"0.4.0","text":"\nYou are an expert developer proficient in TypeScript, React,Expo (React Native), NativeWind Version 4, Supabase, Zod, Zustand, TanStack React Query.\n\ncreate a weather screen that displays the current weather of Zurich, Switzerland. use openweathermap api to fetch the weather data.\nCertainly! I'll create a weather screen for Zurich, Switzerland using the technologies you mentioned. We'll use the OpenWeatherMap API to fetch the weather data. First, let's break down the components and then I'll provide the code for each part.\n\n1. Set up the project and install dependencies\n2. Create the weather screen component\n3. Set up Zustand store for state management\n4. Create a custom hook for fetching weather data using TanStack React Query\n5. Define types and validation schema using Zod\n6. Style the component using NativeWind\n\nLet's start with the implementation:\n\n1. Set up the project and install dependencies:\n\nAssuming you have already set up an Expo project with TypeScript, install the necessary dependencies:\n\n```bash\nnpm install zustand @tanstack/react-query zod nativewind@4.0.12 axios\nnpm install -D tailwindcss@3.3.2\n```\n\n2. Create the weather screen component (WeatherScreen.tsx):\n\n```tsx\nimport React from 'react';\nimport { View, Text, ActivityIndicator } from 'react-native';\nimport { useWeatherStore } from '../store/weatherStore';\nimport { useWeatherData } from '../hooks/useWeatherData';\n\nexport const WeatherScreen: React.FC = () => {\n  const { data, isLoading, isError } = useWeatherData();\n  const { setWeatherData } = useWeatherStore();\n\n  React.useEffect(() => {\n    if (data) {\n      setWeatherData(data);\n    }\n  }, [data, setWeatherData]);\n\n  if (isLoading) {\n    return (\n      <View className=\"flex-1 justify-center items-center\">\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      </View>\n    );\n  }\n\n  if (isError) {\n    return (\n      <View className=\"flex-1 justify-center items-center\">\n        <Text className=\"text-red-500 text-lg\">Error fetching weather data</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View className=\"flex-1 bg-blue-100 p-4\">\n      <Text className=\"text-3xl font-bold mb-4\">Weather in Zurich</Text>\n      {data && (\n        <>\n          <Text className=\"text-2xl mb-2\">{data.main.temp}Â°C</Text>\n          <Text className=\"text-xl mb-2\">{data.weather[0].description}</Text>\n          <Text className=\"text-lg\">Humidity: {data.main.humidity}%</Text>\n          <Text className=\"text-lg\">Wind Speed: {data.wind.speed} m/s</Text>\n        </>\n      )}\n    </View>\n  );\n};\n```\n\n3. Set up Zustand store (weatherStore.ts):\n\n```typescript\nimport { create } from 'zustand';\nimport { WeatherData } from '../types/weather';\n\ntype WeatherStore = {\n  weatherData: WeatherData | null;\n  setWeatherData: (data: WeatherData) => void;\n};\n\nexport const useWeatherStore = create<WeatherStore>((set) => ({\n  weatherData: null,\n  setWeatherData: (data) => set({ weatherData: data }),\n}));\n```\n\n4. Create a custom hook for fetching weather data (useWeatherData.ts):\n\n```typescript\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { WeatherData, weatherDataSchema } from '../types/weather';\n\nconst API_KEY = 'YOUR_OPENWEATHERMAP_API_KEY';\nconst ZURICH_COORDS = { lat: 47.3769, lon: 8.5417 };\n\nconst fetchWeatherData = async (): Promise<WeatherData> => {\n  const response = await axios.get(\n    `https://api.openweathermap.org/data/2.5/weather?lat=${ZURICH_COORDS.lat}&lon=${ZURICH_COORDS.lon}&units=metric&appid=${API_KEY}`\n  );\n  return weatherDataSchema.parse(response.data);\n};\n\nexport const useWeatherData = () => {\n  return useQuery<WeatherData, Error>(['weather'], fetchWeatherData, {\n    refetchInterval: 1000 * 60 * 5, // Refetch every 5 minutes\n  });\n};\n```\n\n5. Define types and validation schema (weather.ts):\n\n```typescript\nimport { z } from 'zod';\n\nexport const weatherDataSchema = z.object({\n  main: z.object({\n    temp: z.number(),\n    humidity: z.number(),\n  }),\n  weather: z.array(\n    z.object({\n      description: z.string(),\n    })\n  ),\n  wind: z.object({\n    speed: z.number(),\n  }),\n});\n\nexport type WeatherData = z.infer<typeof weatherDataSchema>;\n```\n\n6. Configure NativeWind (tailwind.config.js):\n\n```javascript\nmodule.exports = {\n  content: ['./App.{js,jsx,ts,tsx}', './src/**/*.{js,jsx,ts,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\nNow, you can use the `WeatherScreen` component in your main App.tsx file:\n\n```tsx\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { WeatherScreen } from './src/screens/WeatherScreen';\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <WeatherScreen />\n    </QueryClientProvider>\n  );\n}\n```\n\nThis implementation creates a weather screen that displays the current weather for Zurich, Switzerland. It uses Zustand for state management, TanStack React Query for data fetching, Zod for type validation, and NativeWind for styling.\n\nRemember to replace 'YOUR_OPENWEATHERMAP_API_KEY' with your actual OpenWeatherMap API key in the `useWeatherData.ts` file.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":33}},"image_offsets":[]},{"id":{"replica_id":0,"value":21},"start":283,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":34}},"image_offsets":[]},{"id":{"replica_id":0,"value":22},"start":5159,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":35}},"image_offsets":[]}],"summary":"Weather Screen for Zurich Using React Native and OpenWeatherMap API","slash_command_output_sections":[{"range":{"start":0,"end":149},"icon":"Library","label":"Default"},{"range":{"start":1,"end":149},"icon":"Library","label":"expo stack"}]}